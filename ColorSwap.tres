[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;


uniform vec4 original_0: hint_color;
uniform vec4 original_1: hint_color;
uniform vec4 original_2: hint_color;
uniform vec4 replace_0: hint_color;
uniform vec4 replace_1: hint_color;
uniform vec4 replace_2: hint_color;

const float precision = 0.1;


vec4 swap_color(vec4 color){
	vec4 original_colors[3] = vec4[3] (original_0, original_1, original_2);
	vec4 replace_colors[3] = vec4[3] (replace_0, replace_1, replace_2);
	for (int i = 0; i < 3; i ++) {
		if (distance(color, original_colors[i]) <= precision){
			return replace_colors[i];
		}
	}
	return color;
}


void fragment() {
	COLOR = swap_color(texture(TEXTURE, UV));
}
"

[resource]
shader = SubResource( 1 )
shader_param/original_0 = Color( 0.705882, 0.670588, 0.447059, 1 )
shader_param/original_1 = Color( 0.172549, 0.196078, 0.168627, 1 )
shader_param/original_2 = null
shader_param/replace_0 = Color( 0.12549, 0.141176, 0.223529, 1 )
shader_param/replace_1 = Color( 0.168627, 0.27451, 0.407843, 1 )
shader_param/replace_2 = Color( 0, 0, 0, 1 )
